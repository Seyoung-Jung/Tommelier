{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"GCN_yoonjong","provenance":[{"file_id":"1aRRdIbkAtzemcLko8PXARENu6An5IIrG","timestamp":1609946388053}],"collapsed_sections":[],"machine_shape":"hm"},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"bE1lBei4tv-H"},"source":["# Graph Convolution Netowrk\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"OETtBrwj6lV2"},"source":["%%capture\n","\n","!conda install -c dglteam dgl-cuda10.1\n","!pip install dgl-cu101\n","!pip install partd\n","!pip install stanfordnlp\n","!python -m pip install fsspec==0.3.3"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bSeSxLSqMboK","executionInfo":{"status":"ok","timestamp":1610310121832,"user_tz":-540,"elapsed":420070,"user":{"displayName":"청강생","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjlB7db2_cSW5g-YVKpHFQarF1LnXYLFXL_f3SDFg=s64","userId":"04746276170955697226"}},"outputId":"64f564d3-0924-4ed0-c83c-ccc3a2f9ca84"},"source":["import pickle\n","import argparse\n","from collections import defaultdict\n","\n","import dgl\n","from tqdm.notebook import tqdm\n","import numpy as np\n","import pandas as pd\n","import torch\n","import torch.nn as nn\n","import torchtext\n","from torch.utils.data import DataLoader\n","from sklearn.neighbors import NearestNeighbors\n","\n","from ..Models.GCN import layers\n","from ..Models.GCN import sampler as sampler_module\n","from ..Models.GCN import evaluation\n","from ..Models.GCN import model\n","from ..Models.GCN import sampler"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/content/drive/.shortcut-targets-by-id/1EuwSCpz5Pb3aj26bpckkWApVSXdPjLxE/Pinsage/pinsage\n"],"name":"stdout"},{"output_type":"stream","text":["DGL backend not selected or invalid.  Assuming PyTorch for now.\n","Using backend: pytorch\n"],"name":"stderr"},{"output_type":"stream","text":["Setting the default backend to \"pytorch\". You can change it in the ~/.dgl/config.json file or export the DGLBACKEND environment variable.  Valid options are: pytorch, mxnet, tensorflow (all lowercase)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"btSxvBEZuxtf"},"source":["## Build Dataset\r\n","Wine Data Preprocessing\r\n","* 와인 데이터를 DGL 프레임워크 입력에 맞게 전처리\r\n","\r\n","\r\n","* 기준 디렉토리에 'users.json', 'wines.json', 'ratings.json'을 만들어 둘 것\r\n","    * --directory로 기준 디렉토리 입력\r\n","    * users.json: 유저 메타데이터\r\n","    * wines.json: 와인 메타데이터\r\n","    * train.json: train 리뷰 데이터\r\n","    * test.json: test 리뷰 데이터\r\n","\r\n","* output_path는 pkl확장자로 저장할 것"]},{"cell_type":"code","metadata":{"id":"AnpzSv9du4Jz"},"source":["!python process_wine.py --directory ../data --output_path data.pkl "],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"TPyQiHIwuJoQ"},"source":["## Training"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-70Uyw8yiFCz","executionInfo":{"status":"ok","timestamp":1610196604128,"user_tz":-540,"elapsed":15995717,"user":{"displayName":"신윤종","photoUrl":"","userId":"04808118463342931153"}},"outputId":"15ed0c83-0f25-4c87-ea62-f4dc4cf184e6"},"source":["!python model.py -d data.pkl -s GCN -k 500 --eval-epochs 100 --save-epochs 0 --num-epochs 500 --device 0 --hidden-dims 128 --batch-size 64 --batches-per-epoch 512 --num-random-walks=10 --lr 1e-3 --random-walk-restart-prob .3  --retrain 0"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Using backend: pytorch\n","Current cuda device  0\n"," 20% 100/500 [52:37<3:32:02, 31.81s/it]\tEpoch:100\tRecall:0.385\tHitrate:0.872\tPrecision:0.009\n"," 40% 200/500 [1:45:12<2:35:28, 31.09s/it]\tEpoch:200\tRecall:0.417\tHitrate:0.887\tPrecision:0.01\n"," 60% 300/500 [2:38:49<1:45:47, 31.74s/it]\tEpoch:300\tRecall:0.447\tHitrate:0.903\tPrecision:0.011\n"," 80% 400/500 [3:32:37<53:12, 31.93s/it]\tEpoch:400\tRecall:0.456\tHitrate:0.904\tPrecision:0.011\n","100% 500/500 [4:26:25<00:00, 31.97s/it]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"TgudxBUdrgv0"},"source":["## Evaluation\n"]},{"cell_type":"code","metadata":{"id":"xGCyNwQFiD_m"},"source":["# Setting Args and Loading Dataset\n","\n","class Args(object):\n","    def __init__(self, **kwargs):\n","        for key in kwargs:\n","            setattr(self, key, kwargs[key])\n","LOAD_PATH = 'GCN.pt'\n","DATA_PATH = '../Data/data.pkl'\n","\n","arg_dict = {\n","    'dataset_path': DATA_PATH,\n","    'save_path': LOAD_PATH, \n","    'lr': 1e-3,\n","    'k': 10,\n","    'retrain': 0,\n","    'random_walk_length': 2, \n","    'random_walk_restart_prob': .3, \n","    'num_random_walks': 10, \n","    'num_neighbors': 3,\n","    'num_layers': 2,\n","    'num_workers': 0,\n","    'batch_size': 128, \n","    'hidden_dims': 1024, \n","    'device': 0\n","}\n","args = Args(**arg_dict)\n","device = torch.device(f'cuda:{args.device}' if torch.cuda.is_available() else 'cpu')\n","\n","with open(args.dataset_path, 'rb') as f:\n","    dataset = pickle.load(f)\n","\n","data_dict = {\n","    'graph': dataset['train-graph'],\n","    'users': dataset['user-data'], \n","    'items': dataset['item-data'], \n","    'ratings': dataset['rating-data'], \n","    'val_matrix': None,  \n","    'test_matrix': None, \n","    'testset': dataset['testset'], \n","    'item_texts': dataset['item-texts'],\n","    'user_ntype': dataset['user-type'],\n","    'item_ntype': dataset['item-type'],\n","    'user_to_item_etype': dataset['user-to-item-type'],\n","    'timestamp': 'timestamp', \n","    'user_category': dataset['user-category'], \n","    'item_category': dataset['item-category']\n","}\n","g = data_dict['graph']\n","users = data_dict['users']\n","items = data_dict['items']\n","ratings = data_dict['ratings']\n","\n","item_texts = data_dict['item_texts']\n","user_ntype = data_dict['user_ntype']\n","item_ntype = data_dict['item_ntype']\n","user_to_item_etype = data_dict['user_to_item_etype']\n","test_label = data_dict['testset']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"UvkR9_3NLtsp"},"source":["'''\r\n","Load Model\r\n","'''\r\n","data_dict = model.prepare_dataset(data_dict, args)\r\n","test_model, _, _ = model.load_model(data_dict, device, args)\r\n","test_model = test_model.to(device)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"O2Nn_SSjSWAU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610310178185,"user_tz":-540,"elapsed":35656,"user":{"displayName":"청강생","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjlB7db2_cSW5g-YVKpHFQarF1LnXYLFXL_f3SDFg=s64","userId":"04746276170955697226"}},"outputId":"36da4a93-92db-418a-a265-722f1ae8587c"},"source":["'''\r\n","ID dictionary\r\n","'''\r\n","nid_uid_dict = {v: k for v, k in enumerate(list(g.ndata['userID'].values())[0].numpy())}\r\n","nid_wid_dict = {nid.item(): wid.item() for wid, nid in  zip(g.ndata['wine_id']['wine'], g.ndata['id']['wine'])}\r\n","\r\n","'''\r\n","Item Embedding\r\n","'''\r\n","data_dict = model.prepare_dataset(data_dict, args)\r\n","_, _, neighbor_sampler = model.prepare_dataloader(data_dict, args)\r\n","h_item = evaluation.get_all_emb(test_model, g.ndata['id'][item_ntype], data_dict['textset'], item_ntype, neighbor_sampler, args.batch_size, device)\r\n","\r\n","'''\r\n","Recommendation Engine\r\n","'''\r\n","items_batch = evaluation.item_by_user_batch(g, user_ntype, item_ntype, user_to_item_etype, 'timestamp', args)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 20.6 s, sys: 649 ms, total: 21.2 s\n","Wall time: 14.1 s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"KGVZ-q1Ijuu4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610310185410,"user_tz":-540,"elapsed":11967,"user":{"displayName":"청강생","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjlB7db2_cSW5g-YVKpHFQarF1LnXYLFXL_f3SDFg=s64","userId":"04746276170955697226"}},"outputId":"3495ef7e-a8cd-448c-a32f-fd8d742401c8"},"source":["'''\r\n","Evaluation\r\n","'''\r\n","recalls = []\r\n","precisions = [] \r\n","hitrates = []\r\n","users = []\r\n","\r\n","for i, nodes in enumerate(items_batch):\r\n","    '''\r\n","    nodes : 유저당 실제 인터랙션 노드들 [train 노드, test 노드 (8: 2비율)]\r\n","    '''\r\n","    # 실제 유저 ID 탐색\r\n","    category = nid_uid_dict[i]\r\n","    user_id = data_dict['user_category'][category]  # 실제 유저 id\r\n","    label = data_dict['testset'][user_id]  # 테스트 라벨\r\n","    users.append(user_id)\r\n","\r\n","    # 실제 와인 ID 탐색\r\n","    item = evaluation.node_to_item(nodes, nid_wid_dict, data_dict['item_category'])  # 와인 ID\r\n","    label_idx = [i for i, x in enumerate(item) if x in label]  # 라벨 인덱스\r\n","\r\n","    # 아이템 추천\r\n","    nodes = [x for i, x in enumerate(nodes) if i not in label_idx]  # 라벨 인덱스 미포함 입력 학습용 노드\r\n","    h_nodes = h_item[nodes]  # 인터랙션 개수\r\n","    h_center = torch.mean(h_nodes, axis=0)  # 중앙 임베딩  \r\n","    dist = h_center @ h_item.t()  # 센터 임베딩 * 모든 임베딩 -> 행렬곱\r\n","    topk = dist.topk(args.k)[1].cpu().numpy()  # dist 크기 순서로 k개 추출\r\n","    topk = evaluation.node_to_item(topk, nid_wid_dict, data_dict['item_category'])  # ID 변환\r\n","\r\n","    tp = [x for x in label if x in topk]\r\n","    if not tp:\r\n","        recall, precision, hitrate = 0, 0, 0\r\n","    else:\r\n","        recall = len(tp) / len(label) \r\n","        precision = len(tp) / len(topk)\r\n","        hitrate = 1  # 하나라도 있음\r\n","\r\n","    recalls.append(recall)\r\n","    precisions.append(precision)\r\n","    hitrates.append(hitrate)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 5.13 s, sys: 1.63 s, total: 6.76 s\n","Wall time: 6.78 s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"8vw1TItY7D4o"},"source":["result_df = pd.DataFrame({'recall': recalls, 'precision': precisions, 'hitrate': hitrates})\r\n","result_df = result_df.mean().apply(lambda x: round(x, 3))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UnlsgLs1ahvB","executionInfo":{"status":"ok","timestamp":1610310185412,"user_tz":-540,"elapsed":9840,"user":{"displayName":"청강생","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjlB7db2_cSW5g-YVKpHFQarF1LnXYLFXL_f3SDFg=s64","userId":"04746276170955697226"}},"outputId":"8f47e167-de50-4ff1-836a-0184a217ceaf"},"source":["result_df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["recall       0.048\n","precision    0.046\n","hitrate      0.339\n","dtype: float64"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"id":"OeSdJP36XV7A"},"source":["# 임베딩 저장\n","\n","import numpy as np\n","emb_list = emb_list.cpu()\n","np.save('embedding.npy', emb_list.numpy())"],"execution_count":null,"outputs":[]}]}